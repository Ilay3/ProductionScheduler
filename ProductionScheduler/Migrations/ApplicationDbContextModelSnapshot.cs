// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionScheduler.Data;

#nullable disable

namespace ProductionScheduler.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ProductionScheduler.Models.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Details");
                });

            modelBuilder.Entity("ProductionScheduler.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("ProductionScheduler.Models.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MachineTypes");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.ToTable("ProductionTasks");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTaskStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderInTask")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentProductionTaskStageId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("PlannedDuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PlannedEndTime")
                        .HasColumnType("TEXT");

                    b.Property<double>("PlannedSetupTime")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductionTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityToProcess")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RouteStageId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StandardTimePerUnitAtExecution")
                        .HasColumnType("REAL");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ParentProductionTaskStageId");

                    b.HasIndex("ProductionTaskId");

                    b.HasIndex("RouteStageId");

                    b.ToTable("ProductionTaskStages");
                });

            modelBuilder.Entity("ProductionScheduler.Models.RouteStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetailId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderInRoute")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StandardTimePerUnit")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("RouteStages");
                });

            modelBuilder.Entity("ProductionScheduler.Models.Machine", b =>
                {
                    b.HasOne("ProductionScheduler.Models.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MachineType");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTask", b =>
                {
                    b.HasOne("ProductionScheduler.Models.Detail", "Detail")
                        .WithMany()
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTaskStage", b =>
                {
                    b.HasOne("ProductionScheduler.Models.Machine", "AssignedMachine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProductionScheduler.Models.ProductionTaskStage", "ParentStage")
                        .WithMany("SubStages")
                        .HasForeignKey("ParentProductionTaskStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProductionScheduler.Models.ProductionTask", "ProductionTask")
                        .WithMany("TaskStages")
                        .HasForeignKey("ProductionTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionScheduler.Models.RouteStage", "RouteStage")
                        .WithMany()
                        .HasForeignKey("RouteStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedMachine");

                    b.Navigation("ParentStage");

                    b.Navigation("ProductionTask");

                    b.Navigation("RouteStage");
                });

            modelBuilder.Entity("ProductionScheduler.Models.RouteStage", b =>
                {
                    b.HasOne("ProductionScheduler.Models.Detail", "Detail")
                        .WithMany("RouteStages")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionScheduler.Models.MachineType", "ApplicableMachineType")
                        .WithMany("ApplicableRouteStages")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicableMachineType");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("ProductionScheduler.Models.Detail", b =>
                {
                    b.Navigation("RouteStages");
                });

            modelBuilder.Entity("ProductionScheduler.Models.MachineType", b =>
                {
                    b.Navigation("ApplicableRouteStages");

                    b.Navigation("Machines");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTask", b =>
                {
                    b.Navigation("TaskStages");
                });

            modelBuilder.Entity("ProductionScheduler.Models.ProductionTaskStage", b =>
                {
                    b.Navigation("SubStages");
                });
#pragma warning restore 612, 618
        }
    }
}
